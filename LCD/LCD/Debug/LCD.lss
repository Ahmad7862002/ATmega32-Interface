
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001277  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e0  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056b  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000795  00000000  00000000  00002cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  7a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <Dio_ChannelDirectionSet+0xa>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	71 f0       	breq	.+28     	; 0xa6 <Dio_ChannelDirectionSet+0x24>
  8a:	08 95       	ret
  8c:	fc 01       	movw	r30, r24
  8e:	40 81       	ld	r20, Z
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <Dio_ChannelDirectionSet+0x18>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <Dio_ChannelDirectionSet+0x14>
  9e:	20 95       	com	r18
  a0:	24 23       	and	r18, r20
  a2:	20 83       	st	Z, r18
  a4:	08 95       	ret
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <Dio_ChannelDirectionSet+0x32>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <Dio_ChannelDirectionSet+0x2e>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
  be:	44 23       	and	r20, r20
  c0:	19 f0       	breq	.+6      	; 0xc8 <Dio_ChannelWrite+0xa>
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	71 f0       	breq	.+28     	; 0xe2 <Dio_ChannelWrite+0x24>
  c6:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Dio_ChannelWrite+0x18>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Dio_ChannelWrite+0x14>
  da:	20 95       	com	r18
  dc:	24 23       	and	r18, r20
  de:	20 83       	st	Z, r18
		break;
  e0:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
  e2:	fc 01       	movw	r30, r24
  e4:	40 81       	ld	r20, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <Dio_ChannelWrite+0x32>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <Dio_ChannelWrite+0x2e>
  f4:	24 2b       	or	r18, r20
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <LCD_Send_Instruction>:
#endif	
}

void LCD_Clear(void)
{
	LCD_Send_Instruction(LCD_CLEAR_DISPLAY);
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	88 e3       	ldi	r24, 0x38	; 56
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 116:	8f e9       	ldi	r24, 0x9F	; 159
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Send_Instruction+0x20>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_Send_Instruction+0x26>
 120:	00 00       	nop
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Send_Instruction+0x38>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Send_Instruction+0x3e>
 138:	00 00       	nop
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	9c 2f       	mov	r25, r28
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	89 2b       	or	r24, r25
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Send_Instruction+0x54>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Send_Instruction+0x5a>
 154:	00 00       	nop
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Send_Instruction+0x6c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Send_Instruction+0x72>
 16c:	00 00       	nop
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_Send_Instruction+0x84>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_Send_Instruction+0x8a>
 184:	00 00       	nop
 186:	8b b3       	in	r24, 0x1b	; 27
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	c2 95       	swap	r28
 190:	c0 7f       	andi	r28, 0xF0	; 240
 192:	c8 2b       	or	r28, r24
 194:	cb bb       	out	0x1b, r28	; 27
 196:	8f e9       	ldi	r24, 0x9F	; 159
 198:	9f e0       	ldi	r25, 0x0F	; 15
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Send_Instruction+0xa0>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_Send_Instruction+0xa6>
 1a0:	00 00       	nop
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	88 e3       	ldi	r24, 0x38	; 56
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 1ae:	8f e9       	ldi	r24, 0x9F	; 159
 1b0:	9f e0       	ldi	r25, 0x0F	; 15
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Send_Instruction+0xb8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_Send_Instruction+0xbe>
 1b8:	00 00       	nop
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <LCD_Init>:
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <LCD_Init+0x6>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_Init+0x10>
 1ce:	00 00       	nop
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	87 e3       	ldi	r24, 0x37	; 55
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 41 00 	call	0x82	; 0x82 <Dio_ChannelDirectionSet>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	87 e3       	ldi	r24, 0x37	; 55
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_ChannelDirectionSet>
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	87 e3       	ldi	r24, 0x37	; 55
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <Dio_ChannelDirectionSet>
 1f4:	8a b3       	in	r24, 0x1a	; 26
 1f6:	80 6f       	ori	r24, 0xF0	; 240
 1f8:	8a bb       	out	0x1a, r24	; 26
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
 212:	08 95       	ret

00000214 <LCD_RowCol_Select>:

void LCD_RowCol_Select(uint8 Row, uint8 Col)
{
	uint8 u8LocalLineAddress = 0U;
		
	switch(Row)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	39 f0       	breq	.+14     	; 0x226 <LCD_RowCol_Select+0x12>
 218:	58 f0       	brcs	.+22     	; 0x230 <LCD_RowCol_Select+0x1c>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	31 f0       	breq	.+12     	; 0x22a <LCD_RowCol_Select+0x16>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	31 f0       	breq	.+12     	; 0x22e <LCD_RowCol_Select+0x1a>
	LCD_Send_Instruction(LCD_CLEAR_DISPLAY);
}

void LCD_RowCol_Select(uint8 Row, uint8 Col)
{
	uint8 u8LocalLineAddress = 0U;
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	05 c0       	rjmp	.+10     	; 0x230 <LCD_RowCol_Select+0x1c>
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x00 */
			u8LocalLineAddress = Col | LCD_1ST_LINE_BASE;
			break;
		case 1:
			/* !Comment: When Writing To LCD 2nd Col The Base Address is 0x40 */
			u8LocalLineAddress = Col | LCD_2ND_LINE_BASE;
 226:	60 64       	ori	r22, 0x40	; 64
			break;
 228:	03 c0       	rjmp	.+6      	; 0x230 <LCD_RowCol_Select+0x1c>
		case 2:
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x10 */
			u8LocalLineAddress = Col | LCD_3RD_LINE_BASE;
 22a:	60 61       	ori	r22, 0x10	; 16
			break;
 22c:	01 c0       	rjmp	.+2      	; 0x230 <LCD_RowCol_Select+0x1c>
		case 3:
			/* !Comment: When Writing To LCD 1st Col The Base Address is 0x50 */
			u8LocalLineAddress = Col | LCD_4TH_LINE_BASE;
 22e:	60 65       	ori	r22, 0x50	; 80
			break;
		default:
			break;
	}
	LCD_Send_Instruction(LCD_DDRAM_CONST | u8LocalLineAddress);	
 230:	86 2f       	mov	r24, r22
 232:	80 68       	ori	r24, 0x80	; 128
 234:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
 238:	08 95       	ret

0000023a <LCD_CharDisplay>:
}
void LCD_CharDisplay(uint8 Data)
{
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
	/* !Comment: RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RS, DIO_HIGH);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	88 e3       	ldi	r24, 0x38	; 56
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_RW, DIO_LOW);	
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	8f e9       	ldi	r24, 0x9F	; 159
 258:	9f e0       	ldi	r25, 0x0F	; 15
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_CharDisplay+0x20>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_CharDisplay+0x26>
 260:	00 00       	nop
	/* !Comment: Delay of Address Set 60ns minimum */
	_delay_ms(1);
	/* !Comment: Enable LCD E=1 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 26e:	8f e9       	ldi	r24, 0x9F	; 159
 270:	9f e0       	ldi	r25, 0x0F	; 15
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_CharDisplay+0x38>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_CharDisplay+0x3e>
 278:	00 00       	nop
	_delay_ms(1);
#if LCD_EIGHTBIT_DATA
	Dio_PortWrite(LCD_DATA_OUT_REG, Data);
#else
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= (Data & 0xF0U);
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	9c 2f       	mov	r25, r28
 284:	90 7f       	andi	r25, 0xF0	; 240
 286:	89 2b       	or	r24, r25
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_CharDisplay+0x54>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_CharDisplay+0x5a>
 294:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	88 e3       	ldi	r24, 0x38	; 56
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 2a2:	8f e9       	ldi	r24, 0x9F	; 159
 2a4:	9f e0       	ldi	r25, 0x0F	; 15
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_CharDisplay+0x6c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_CharDisplay+0x72>
 2ac:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);
	
	/* !Comment: Enable LCD E=1  (To write the other 4-bit of the instruction)*/
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_HIGH);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 2ba:	8f e9       	ldi	r24, 0x9F	; 159
 2bc:	9f e0       	ldi	r25, 0x0F	; 15
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_CharDisplay+0x84>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_CharDisplay+0x8a>
 2c4:	00 00       	nop
	/* !Comment: Delay for processing PW min 450ns */
	_delay_ms(1);
	/* !Comment: Clear the Previous Data */
	*LCD_DATA_OUT_REG &= 0x0FU;
 2c6:	8b b3       	in	r24, 0x1b	; 27
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	8b bb       	out	0x1b, r24	; 27
	*LCD_DATA_OUT_REG |= ((Data << 4U) & 0xF0U);
 2cc:	8b b3       	in	r24, 0x1b	; 27
 2ce:	c2 95       	swap	r28
 2d0:	c0 7f       	andi	r28, 0xF0	; 240
 2d2:	c8 2b       	or	r28, r24
 2d4:	cb bb       	out	0x1b, r28	; 27
 2d6:	8f e9       	ldi	r24, 0x9F	; 159
 2d8:	9f e0       	ldi	r25, 0x0F	; 15
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_CharDisplay+0xa0>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_CharDisplay+0xa6>
 2e0:	00 00       	nop
	/* !Comment: Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(1);
	/* !Comment: Disable LCD E=0 */
	Dio_ChannelWrite(LCD_CTRL_OUT_REG, LCD_EN, DIO_LOW);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	88 e3       	ldi	r24, 0x38	; 56
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 5f 00 	call	0xbe	; 0xbe <Dio_ChannelWrite>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_CharDisplay+0xb8>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_CharDisplay+0xbe>
 2f8:	00 00       	nop
	/* !Comment: Data Hold delay Th = 10ns */
	_delay_ms(1);	
#endif
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <LCD_StringDisplay>:

void LCD_StringDisplay(char *Str)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	while(*Str != '\0')
 304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_StringDisplay+0xe>
	{
		LCD_CharDisplay(*Str);
 306:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_CharDisplay>
		Str++;
 30a:	21 96       	adiw	r28, 0x01	; 1
#endif
}

void LCD_StringDisplay(char *Str)
{
	while(*Str != '\0')
 30c:	88 81       	ld	r24, Y
 30e:	81 11       	cpse	r24, r1
 310:	fa cf       	rjmp	.-12     	; 0x306 <LCD_StringDisplay+0x8>
	{
		LCD_CharDisplay(*Str);
		Str++;
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <LCD_IntegerDisplay>:

void LCD_IntegerDisplay(sint32 Data)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	61 97       	sbiw	r28, 0x11	; 17
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 330:	4a e0       	ldi	r20, 0x0A	; 10
 332:	be 01       	movw	r22, r28
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	0e 94 c7 01 	call	0x38e	; 0x38e <__itoa_ncheck>
	/* !Comment: String to hold the ascii result */
	char au8LocalResult[17];
	/* !Comment: 10 for decimal */
	itoa(Data, au8LocalResult, 10);
	/* !Comment: Display The Result */
	LCD_StringDisplay(au8LocalResult);
 33c:	ce 01       	movw	r24, r28
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_StringDisplay>
 344:	61 96       	adiw	r28, 0x11	; 17
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <main>:
#include "LCD.h"
#include <util/delay.h>

int main(void)
{
	LCD_Init();
 356:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_Init>
    /* Replace with your application code */
    while (1) 
    {
		LCD_SHIFT(LCD_SHIFT_LEFT);
 35a:	88 e1       	ldi	r24, 0x18	; 24
 35c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Send_Instruction>
		LCD_RowCol_Select(0,5);
 360:	65 e0       	ldi	r22, 0x05	; 5
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_RowCol_Select>
		LCD_StringDisplay("Hello!");
 368:	80 e6       	ldi	r24, 0x60	; 96
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_StringDisplay>
		LCD_RowCol_Select(1,0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_RowCol_Select>
		LCD_StringDisplay("Welcome LCD ");
 378:	87 e6       	ldi	r24, 0x67	; 103
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_StringDisplay>
		LCD_IntegerDisplay(101);
 380:	65 e6       	ldi	r22, 0x65	; 101
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_IntegerDisplay>
 38c:	e6 cf       	rjmp	.-52     	; 0x35a <main+0x4>

0000038e <__itoa_ncheck>:
 38e:	bb 27       	eor	r27, r27
 390:	4a 30       	cpi	r20, 0x0A	; 10
 392:	31 f4       	brne	.+12     	; 0x3a0 <__itoa_ncheck+0x12>
 394:	99 23       	and	r25, r25
 396:	22 f4       	brpl	.+8      	; 0x3a0 <__itoa_ncheck+0x12>
 398:	bd e2       	ldi	r27, 0x2D	; 45
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__utoa_common>

000003a4 <__utoa_ncheck>:
 3a4:	bb 27       	eor	r27, r27

000003a6 <__utoa_common>:
 3a6:	fb 01       	movw	r30, r22
 3a8:	55 27       	eor	r21, r21
 3aa:	aa 27       	eor	r26, r26
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	aa 1f       	adc	r26, r26
 3b2:	a4 17       	cp	r26, r20
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__utoa_common+0x14>
 3b6:	a4 1b       	sub	r26, r20
 3b8:	83 95       	inc	r24
 3ba:	50 51       	subi	r21, 0x10	; 16
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <__utoa_common+0x6>
 3be:	a0 5d       	subi	r26, 0xD0	; 208
 3c0:	aa 33       	cpi	r26, 0x3A	; 58
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__utoa_common+0x20>
 3c4:	a9 5d       	subi	r26, 0xD9	; 217
 3c6:	a1 93       	st	Z+, r26
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	79 f7       	brne	.-34     	; 0x3aa <__utoa_common+0x4>
 3cc:	b1 11       	cpse	r27, r1
 3ce:	b1 93       	st	Z+, r27
 3d0:	11 92       	st	Z+, r1
 3d2:	cb 01       	movw	r24, r22
 3d4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <strrev>

000003d8 <strrev>:
 3d8:	dc 01       	movw	r26, r24
 3da:	fc 01       	movw	r30, r24
 3dc:	67 2f       	mov	r22, r23
 3de:	71 91       	ld	r23, Z+
 3e0:	77 23       	and	r23, r23
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <strrev+0x4>
 3e4:	32 97       	sbiw	r30, 0x02	; 2
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <strrev+0x18>
 3e8:	7c 91       	ld	r23, X
 3ea:	6d 93       	st	X+, r22
 3ec:	70 83       	st	Z, r23
 3ee:	62 91       	ld	r22, -Z
 3f0:	ae 17       	cp	r26, r30
 3f2:	bf 07       	cpc	r27, r31
 3f4:	c8 f3       	brcs	.-14     	; 0x3e8 <strrev+0x10>
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
