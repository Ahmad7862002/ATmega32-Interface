
Dio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000473  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000379  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_ChannelDirectionSet>:
#include "ATmega32_Cfg.h"

void Dio_ChannelDirectionSet(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinDirectionEnum_t Direction)
{

	switch(Direction)
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <Dio_ChannelDirectionSet+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	71 f0       	breq	.+28     	; 0xa0 <Dio_ChannelDirectionSet+0x24>
  84:	08 95       	ret
	{
		case DIO_INPUT:
		CLEAR_BIT(*Port_reg,Channel);
  86:	fc 01       	movw	r30, r24
  88:	40 81       	ld	r20, Z
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <Dio_ChannelDirectionSet+0x18>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	6a 95       	dec	r22
  96:	e2 f7       	brpl	.-8      	; 0x90 <Dio_ChannelDirectionSet+0x14>
  98:	20 95       	com	r18
  9a:	24 23       	and	r18, r20
  9c:	20 83       	st	Z, r18
		break;
  9e:	08 95       	ret
		case DIO_OUTPUT:
		SET_BIT(*Port_reg,Channel);
  a0:	fc 01       	movw	r30, r24
  a2:	40 81       	ld	r20, Z
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <Dio_ChannelDirectionSet+0x32>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <Dio_ChannelDirectionSet+0x2e>
  b2:	24 2b       	or	r18, r20
  b4:	20 83       	st	Z, r18
  b6:	08 95       	ret

000000b8 <Dio_ChannelRead>:
	}
}

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
  b8:	fc 01       	movw	r30, r24
  ba:	40 81       	ld	r20, Z
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9c 01       	movw	r18, r24
  c2:	06 2e       	mov	r0, r22
  c4:	02 c0       	rjmp	.+4      	; 0xca <Dio_ChannelRead+0x12>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Dio_ChannelRead+0xe>
  ce:	84 2f       	mov	r24, r20
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	82 23       	and	r24, r18
  d4:	93 23       	and	r25, r19
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Dio_ChannelRead+0x24>
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Dio_ChannelRead+0x20>
	return (u8LocalPinValue);
}
  e0:	08 95       	ret

000000e2 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
  e2:	44 23       	and	r20, r20
  e4:	19 f0       	breq	.+6      	; 0xec <Dio_ChannelWrite+0xa>
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	71 f0       	breq	.+28     	; 0x106 <Dio_ChannelWrite+0x24>
  ea:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
  ec:	fc 01       	movw	r30, r24
  ee:	40 81       	ld	r20, Z
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Dio_ChannelWrite+0x18>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Dio_ChannelWrite+0x14>
  fe:	20 95       	com	r18
 100:	24 23       	and	r18, r20
 102:	20 83       	st	Z, r18
		break;
 104:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 106:	fc 01       	movw	r30, r24
 108:	40 81       	ld	r20, Z
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Dio_ChannelWrite+0x32>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <Dio_ChannelWrite+0x2e>
 118:	24 2b       	or	r18, r20
 11a:	20 83       	st	Z, r18
 11c:	08 95       	ret

0000011e <Dio_ChannelToggle>:
		break;
	}	
}
void Dio_ChannelToggle(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	TOGGLE_BIT(*Port_reg,Channel);
 11e:	fc 01       	movw	r30, r24
 120:	40 81       	ld	r20, Z
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <Dio_ChannelToggle+0xe>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Dio_ChannelToggle+0xa>
 130:	24 27       	eor	r18, r20
 132:	20 83       	st	Z, r18
 134:	08 95       	ret

00000136 <Led_Init>:
#include "Led.h"
#include "Dio.h"

void Led_Init(volatile uint8 *Led_reg, LedEnum_t Led_no)
{
	Dio_ChannelDirectionSet(Led_reg, Led_no, DIO_OUTPUT);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
 13c:	08 95       	ret

0000013e <Led_StateSet>:
}
void Led_StateSet(volatile uint8 *Led_reg, LedEnum_t Led_no, LedStateEnum_t state)
{
	if (state == LED_TOGGLE)
 13e:	42 30       	cpi	r20, 0x02	; 2
 140:	19 f4       	brne	.+6      	; 0x148 <Led_StateSet+0xa>
	{
		Dio_ChannelToggle(Led_reg, Led_no);
 142:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_ChannelToggle>
 146:	08 95       	ret
	}
	else
	{
		Dio_ChannelWrite(Led_reg, Led_no, state);
 148:	0e 94 71 00 	call	0xe2	; 0xe2 <Dio_ChannelWrite>
 14c:	08 95       	ret

0000014e <main>:
#include <util/delay.h>


int main(void)
{
	Led_Init(PORTC_DIR_REG, LED2);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	84 e3       	ldi	r24, 0x34	; 52
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 9b 00 	call	0x136	; 0x136 <Led_Init>
	Sw_init(PORTD_DIR_REG, SW2);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 bf 00 	call	0x17e	; 0x17e <Sw_init>
	
    /* Replace with your application code */
    while (1) 
    {
		Sw_StateEnum_t  Sw_State = Sw_StateGet(PORTD_INP_REG,SW2);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Sw_StateGet>
		if(Sw_State == SW_PRESSED)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	c9 f7       	brne	.-14     	; 0x162 <main+0x14>
		{
			Led_StateSet(PORTC_OUT_REG, LED2, LED_TOGGLE);
 170:	42 e0       	ldi	r20, 0x02	; 2
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	85 e3       	ldi	r24, 0x35	; 53
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <Led_StateSet>
 17c:	f2 cf       	rjmp	.-28     	; 0x162 <main+0x14>

0000017e <Sw_init>:

#define DEBOUNCE_PERIOD (20U)

DioPinStateEnum_t Sw_PrevState;
void Sw_init(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
 186:	16 2f       	mov	r17, r22
	Dio_ChannelDirectionSet(Sw_Reg, Sw_no, DIO_INPUT);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_ChannelDirectionSet>
    Sw_PrevState = Dio_ChannelRead(Sw_Reg, Sw_no);
 18e:	61 2f       	mov	r22, r17
 190:	ce 01       	movw	r24, r28
 192:	0e 94 5c 00 	call	0xb8	; 0xb8 <Dio_ChannelRead>
 196:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <Sw_StateGet>:
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
 1aa:	16 2f       	mov	r17, r22
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
	
	if(Sw_PrevState != Dio_ChannelRead(Sw_Reg, Sw_no))
 1ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <Dio_ChannelRead>
 1b0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	89 17       	cp	r24, r25
 1b6:	91 f0       	breq	.+36     	; 0x1dc <Sw_StateGet+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	89 ef       	ldi	r24, 0xF9	; 249
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <Sw_StateGet+0x1c>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Sw_StateGet+0x26>
 1c8:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_PERIOD);

		Sw_PrevState = Dio_ChannelRead(Sw_Reg, Sw_no);
 1ca:	61 2f       	mov	r22, r17
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <Dio_ChannelRead>
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (Sw_PrevState == DIO_HIGH)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <Sw_StateGet+0x3e>
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <Sw_StateGet+0x40>
	Dio_ChannelDirectionSet(Sw_Reg, Sw_no, DIO_INPUT);
    Sw_PrevState = Dio_ChannelRead(Sw_Reg, Sw_no);
}
Sw_StateEnum_t Sw_StateGet(volatile uint8 *Sw_Reg, SwEnumt_t Sw_no)
{
	Sw_StateEnum_t LocalSwState = SW_RELEASED;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <Sw_StateGet+0x40>
		{
			LocalSwState = SW_PRESSED;
		}
		else
		{
			LocalSwState = SW_RELEASED;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return LocalSwState;
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
